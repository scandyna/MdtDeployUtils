/****************************************************************************
 **
 ** Copyright (C) 2019-2021 Philippe Steinmann.
 **
 ** This file is part of MdtApplication library.
 **
 ** MdtApplication is free software: you can redistribute it and/or modify
 ** it under the terms of the GNU Lesser General Public License as published by
 ** the Free Software Foundation, either version 3 of the License, or
 ** (at your option) any later version.
 **
 ** MdtApplication is distributed in the hope that it will be useful,
 ** but WITHOUT ANY WARRANTY; without even the implied warranty of
 ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ** GNU Lesser General Public License for more details.
 **
 ** You should have received a copy of the GNU Lesser General Public License
 ** along with MdtApplication.  If not, see <http://www.gnu.org/licenses/>.
 **
 ****************************************************************************/

/*! \page libs_CommandLineParser Command line parser
 *
 * In this library, a command line parser is composed of 3 main pieces:
 * - A parser definition: Mdt::CommandLineParser::ParserDefinition
 * - A parser: Mdt::CommandLineParser::Parser
 * - A result: Mdt::CommandLineParser::ParserResult
 *
 * It is also possible to add some Bash TAB completion,
 * which will be covered later.
 *
 * \section simple_app_example A simple app example
 *
 * \code
 * #include <Mdt/CommandLineParser/ParserDefinition>
 * #include <Mdt/CommandLineParser/Parser>
 * #include <Mdt/CommandLineParser/ParserResult>
 * #include <QCoreApplication>
 *
 * using namespace Mdt::CommandLineParser;
 *
 * int main(int argc, char **argv)
 * {
 *   QCoreApplication app(argc, argv);
 *
 *   ParserDefinition parserDefinition;
 *   parserDefinition.setApplicationDescription("Copy utility");
 *   parserDefinition.addHelpOption();
 *   parserDefinition.addPositionalArgument(ValueType::File, "source", "Source file to copy");
 *   parserDefinition.addPositionalArgument(ValueType::Directory, "destination", "Destination directory");
 *   parserDefinition.addOption('f', "force", "Overwrite existing files.");
 *
 *   Parser parser(parserDefinition);
 *   if( !parser.parse( app.arguments() ) ){
 *     showErrorMessage( parser.errorText() );
 *     return 1;
 *   }
 *
 *   const ParserResult parserResult = parser.toParserResult();
 *
 *   if( parserResult.isHelpOptionSet() ){
 *     showMessage( parserDefinition.getHelpText() );
 *     return 0;
 *   }
 *
 *   if( parserResult.positionalArgumentCount() != 2 ){
 *     showErrorMessage("Expected exactly 2 positional arguments (source file and destination)");
 *     return 1;
 *   }
 *
 *   bool forceOverwrite = false;
 *   if( parserResult.isOptionShortNameSet('f') ){
 *     forceOverwrite = true;
 *   }
 *   if( parserResult.isOptionLongNameSet("force") ){
 *     forceOverwrite = true;
 *   }
 *
 *   copyFile( parserResult.positionalArgumentAt(0), parserResult.positionalArgumentAt(1), forceOverwrite );
 *
 *   return 0;
 * }
 * \endcode
 *
 * Notice that in above example we have to check if the \a force option is set
 * by querying about the long name and the short name.
 * To avoid that, its better to create the option separately:
 * \code
 * ParserDefinitionOption forceOption('f',"force","Overwrite existing files.");
 * // Other stuff
 * parserDefinition.addOption(forceOption);
 *
 * // Parsing + get the result
 *
 * const bool forceOverwrite = parserResult.isSet(forceOption);
 * \endcode
 * In above example, we don't have to care if the user passed \a -f or \a --force on the command line.
 *
 * \section OptionWithValue Option with value
 *
 * A option can accept a value:
 * \code
 * ParserDefinitionOption overwriteBehaviorOption("overwrite-behavior","Behavior to adopt when target file allready exists.");
 * overwriteBehaviorOption.setValueName("behavior");
 * overwriteBehaviorOption.setPossibleValues({"overwrite","keep","fail"});
 * overwriteBehaviorOption.setDefaultValue("fail");
 * \endcode
 *
 * Setting the possible value is not required, but it is used for the help text,
 * and also for TAB completion.
 *
 * The default value, which is also not required, is used when the user does not provide the option on the command line:
 * \code
 * app --overwrite-behavior keep ...
 * \endcode
 * here, the value of \a overwrite-behavior will be \a keep .
 *
 * If the user does not specify the the option, the default value will be used:
 * \code
 * app ...
 * \endcode
 * here, the value of \a overwrite-behavior will be \a fail .
 *
 * Note that specifying the option without its value is a error:
 * \code
 * app --overwrite-behavior
 * \endcode
 * here the parser will return a error.
 *
 * \subsection OptionWithMultipleValues Option with multiple values
 *
 * A option could have multiple values, for example:
 * \code
 * ParserDefinitionOption paramOption("param","Parameters");
 * paramOption.setValueName("value");
 * paramOption.setDefaultValues({"storage=sql","render=glx"});
 * \endcode
 *
 * If the user does not specify the \a --param option at all,
 * the default values will be used:
 * \code
 * app ...
 * \endcode
 * here, \a param values will be \a storage=sql and \a render=glx .
 *
 * If the user specify the \a --param option at least onces,
 * no default value will be used at all:
 * \code
 * app --param storage=csv ...
 * \endcode
 * here, \a param values will be \a storage=csv .
 *
 * This seems to be a bit surprising,
 * but deducing which value has been specified and giving the default ones not specified
 * on the command line could become application specific.
 * The above example uses key=value pairs, but it could be something other.
 * Also, the behavior of QCommandLineParser is the same for multiple option values.
 *
 * Finally, the user could specify any number of values:
 * \code
 * app --param storage=txt --param render=sw --param logs-format=json ...
 * \endcode
 * here, \a param values will be \a storage=txt \a render=sw and \a logs-format=json .
 *
 *
 * \section appWithSubCommand_example Application with sub-command
 *
 * \todo document
 *
 * \section Command_line_parser Command-line parser
 *
 *
 * \sa https://www.gnu.org/software/guile/manual/html_node/Command-Line-Format.html
 * \sa https://www.gnu.org/prep/standards/html_node/Command_002dLine-Interfaces.html
 *
 * \subsection tab_completion TAB completion
 *
 * \sa Mdt::CommandLineParser::handleBashCompletion()
 *
 * \subsection command_line_parser_debug Debug
 *
 * \sa Mdt/CommandLineParser/ParserResultDebug.h
 *
 * \section rationale Rationale
 *
 * \subsection command_line_parser_rationale About command line parser
 *
 * To parse command line arguments, QCommandLineParser is a helpful tool.
 *
 * QCommandLineParser has no natural notion of sub-commands.
 * It is possible to create such sub-commands using a QCommandLineParser for each one.
 * A drawback is that the QCommandLineParser::helpText() will return the application name,
 * but the sub-command name is expected.
 *
 * Once QCommandLineParser has been set-up, the defined arguments and options cannot be get:
 * \code
 * QCommandLineParser parser;
 * parser.addPositionalArgument("source", QCoreApplication::translate("main", "Source file to copy."));
 * parser.addPositionalArgument("destination", QCoreApplication::translate("main", "Destination directory."));
 *
 * qDebug() << parser.positionalArguments();
 * \endcode
 *
 * Above code will not work, because we did not call %parse() or %process().
 * The returned arguments are those that are passed to the command line
 * and that are not recognized as options,
 * which is expected for parsing.
 *
 * For some cases, getting the arguments and options given can be useful,
 * for example to list available sub-commands in the help,
 * or to generate a Bash-completion script.
 *
 * \subsubsection tab_completion_rationale About TAB completion
 *
 * A idea was to capture TAB on the command line,
 * then do alls the stuff in the application part.
 * This could be multiplatform, yes ?
 * No, see:
 * - https://stackoverflow.com/questions/5255372/how-to-implement-tab-completion
 * - https://stackoverflow.com/questions/13971298/how-do-i-accept-tab-as-input-from-stdin-to-autofill-text/13978270
 *
 * So, use the Bash built-in completion.
 * \sa https://iridakos.com/programming/2018/03/01/bash-programmable-completion-tutorial
 *
 * As sandboxing a solution, generating a script was more complex than I tought.
 *
 * Looking at scripts available in the Linux distribution I use (Ubuntu 18.04)
 * in /usr/share/bash-completion/completions/
 * I discovered that git and CMake do their scripts by hand.
 *
 * One tricky part:
 * I want to list files when we are about to complete a positional argument, like source.
 * This requires to know if we are about to complete this positional argument:
 * \code
 * myapp copy <TAB>
 * \endcode
 * or:
 * \code
 * myapp copy --force <TAB>
 * \endcode
 * or:
 * \code
 * myapp copy path/to/some-file --mode fail-if-destination-exists <TAB>
 * \endcode
 *
 * Above could be solved in Bash, but we are about to re-create a complex parser
 * just for completion.
 *
 * Looking at the gcc complete script, a interesting idea:
 * gcc calls itself to generate completion.
 *
 * So, do we call ourself and do all the work in the C++ side ?
 * Seems good, but how to list directories ?
 * This time we have to re-create what Bash allready supports.
 *
 * So, split and distribute the problem to who knows best.
 * To find the name of the positional argument,
 * ask the C++ part, we can re-use the parser for that.
 * To list files and directores, let Bash do it with compgen -A .
 *
 * In the generated Bash completion script:
 * \code
 * local executable="$1"
 * local currentArgument=$("$executable" completion-find-current-argument $COMP_CWORD $COMP_LINE)
 * \endcode
 *
 * In the parser, a helper function should be provided:
 * \code
 * bool parseCompletionArguments()
 * {
 *   if( first-arg == "completion-find-current-positional-argument-name" ){
 *     if( second-arg is empty){
 *       error
 *     }
 *   }
 *   find the positional argument and return in the form subcommand-argument
 * }
 * \endcode
 *
 * \todo Possible commands / arguments /  options combinations here
 */
