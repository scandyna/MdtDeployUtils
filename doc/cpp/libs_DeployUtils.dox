/****************************************************************************
 **
 ** Copyright (C) 2019-2022 Philippe Steinmann.
 **
 ** This file is part of MdtDeployUtils library.
 **
 ** MdtDeployUtils is free software: you can redistribute it and/or modify
 ** it under the terms of the GNU Lesser General Public License as published by
 ** the Free Software Foundation, either version 3 of the License, or
 ** (at your option) any later version.
 **
 ** MdtDeployUtils is distributed in the hope that it will be useful,
 ** but WITHOUT ANY WARRANTY; without even the implied warranty of
 ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ** GNU Lesser General Public License for more details.
 **
 ** You should have received a copy of the GNU Lesser General Public License
 ** along with MdtDeployUtils.  If not, see <http://www.gnu.org/licenses/>.
 **
 ****************************************************************************/

/*! \page libs_DeployUtils DeployUtils
 *
 * \section Context
 *
 * Deploying a application can require some repetitive work.
 *  For example, make all shared libraries available to the
 *  the end user can be done using existing tools
 *  (like ldd on Linux, or Dependency Walker on Windows).
 *  Using those tools helps to see which libraries to provide,
 *  but they do not copy them automatically.
 *  This is one use case this library can help.
 *
 * \section DeployWithSharedLibraries Deploy with shared libraries
 *
 * \subsection FindSharedLibraries Find shared libraries
 *
 * \subsection BuildContext Build context
 *
 * While developing a application, it has to be compiled in some way.
 *
 * This requires to provide a set of informations to the build system,
 * like the location of the compiler,
 * and also paths to the various libraries the application depends on
 * (also including transitive dependencies).
 *
 * Depending on the platform, the build system and the toolchain,
 * various options are available, or also required.
 *
 * As example, using CMake with the "MinGW Makefiles" generator requires MinGW in the PATH.
 * \sa https://cmake.org/cmake/help/v3.22/generator/MinGW%20Makefiles.html
 *
 * When using CMake, the dependencies can be set using CMAKE_PREFIX_PATH.
 *
 * The CMake API will re-use this build context to find shared libraries
 * (for libraries having RPATH, this one is used first).
 *
 * \subsection HelperClasses Helper classes
 *
 * To copy shared libraries a executable depends on,
 * see Mdt::DeployUtils::CopySharedLibrariesTargetDependsOn.
 *
 * Finding the shared libraries a executable depends on
 * is done by Mdt::DeployUtils::BinaryDependencies.
 *
 * Finding the dependencies is more or less platform specific.
 * For some more details, see:
 * - Mdt::DeployUtils::SharedLibraryFinderLinux
 * - Mdt::DeployUtils::SharedLibraryFinderWindows
 *
 * Classes are available in the Mdt::DeployUtils namespace.
 *
 * \todo document Mdt::DeployUtils::MessageLogger
 *
 */

namespace Mdt{

  /*! \brief Some utilities for application deployment
   */
  namespace DeployUtils{
  }

}
