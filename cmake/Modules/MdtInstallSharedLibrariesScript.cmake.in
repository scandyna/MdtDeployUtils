# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
# file Copyright.txt or https://cmake.org/licensing for details.

message("HI, install...........")

# set(CMAKE_MODULE_PATH @CMAKE_MODULE_PATH@)
# message("CMAKE_MODULE_PATH: ${CMAKE_MODULE_PATH}")

# include(MdtRuntimeEnvironment)

message("DESTDIR: $ENV{DESTDIR}")

message("CMAKE_INSTALL_PREFIX: ${CMAKE_INSTALL_PREFIX}")

message("CMAKE_PREFIX_PATH: @CMAKE_PREFIX_PATH@")
message("CMAKE_CXX_COMPILER: @CMAKE_CXX_COMPILER@")

set(IS_MSVC @MSVC@)
message("Is MSVC: ${IS_MSVC}")

set(mdtDeployUtilsCommand "$<TARGET_FILE:mdtdeployutils>")
message("mdtDeployUtilsCommand: ${mdtDeployUtilsCommand}")

set(targetFile "$<TARGET_FILE:@ARG_TARGET@>")
message("targetFile: ${targetFile}")

###########################################
# PATH environment to run mdtdeployutils
###########################################

set(runPath "@MDT_INSTALL_SHARED_LIBRARIES_SCRIPT_ENV_PATH@")
if(WIN32)
  # ; have to be escaped, otherwise the environment will not be set properly
  # See: https://cmake.org/pipermail/cmake/2009-May/029425.html
  string(REPLACE ";" "\\;" runPath "${runPath}")
endif()

message("runPath: ${runPath}")

###########################################
# Destination and install path
###########################################

set(DESTINATION "@MDT_INSTALL_SHARED_LIBRARIES_SCRIPT_DESTINATION@")

message("DESTINATION: ${DESTINATION}")

if(NOT DESTINATION)
  message(FATAL_ERROR "MdtInstallSharedLibrariesScript: missing DESTINATION")
endif()


# Prevent having //path if DESTIR is not used
set(destDir "$ENV{DESTDIR}")
if(destDir)
  if(WIN32)
    # Remove C: from CMAKE_INSTALL_PREFIX
    string(REGEX REPLACE "^[a-zA-Z]:" ""
      installPrefix
      "${CMAKE_INSTALL_PREFIX}"
    )
    get_filename_component(librariesDestination "$ENV{DESTDIR}/${installPrefix}/${DESTINATION}" ABSOLUTE)
  else()
    get_filename_component(librariesDestination "$ENV{DESTDIR}/${CMAKE_INSTALL_PREFIX}/${DESTINATION}" ABSOLUTE)
  endif()
else()
  get_filename_component(librariesDestination "${CMAKE_INSTALL_PREFIX}/${DESTINATION}" ABSOLUTE)
endif()

message("librariesDestination: ${librariesDestination}")

###########################################
# Options
###########################################

set(INSTALL_IS_UNIX_SYSTEM_WIDE @MDT_INSTALL_SHARED_LIBRARIES_SCRIPT_INSTALL_IS_UNIX_SYSTEM_WIDE@)
if(INSTALL_IS_UNIX_SYSTEM_WIDE)
  message("Install is Unix system wide")
  set(overwriteBehavior keep)
  set(removeRpathOptionArgument --remove-rpath)
else()
  message("Install is NOT Unix system wide")
  set(overwriteBehavior overwrite)
  set(removeRpathOptionArgument)
endif()

message("overwriteBehavior: ${overwriteBehavior}")
message("removeRpathOptionArgument: ${removeRpathOptionArgument}")

set(compilerLocationArguments)
if(IS_MSVC)
  message("Is MSVC, use compiler finder to locate redist dirs")
  set(compilerLocationArguments --compiler-location "compiler-path=@CMAKE_CXX_COMPILER@")
endif()


execute_process(
  COMMAND "${CMAKE_COMMAND}" -E env "${runPath}"
          "${mdtDeployUtilsCommand}" --logger-backend cmake copy-shared-libraries-target-depends-on
            --overwrite-behavior ${overwriteBehavior}
            ${removeRpathOptionArgument}
            --search-prefix-path-list "@CMAKE_PREFIX_PATH@"
            ${compilerLocationArguments}
            "${targetFile}"
            "${librariesDestination}"
  RESULTS_VARIABLE mdtDeployUtilsResult
  ERROR_VARIABLE mdtDeployUtilsError
)
if( NOT (${mdtDeployUtilsResult} EQUAL 0) )
  message(FATAL_ERROR "mdt_install_shared_libraries_target_depends_on() failed: ${mdtDeployUtilsError}")
endif()
